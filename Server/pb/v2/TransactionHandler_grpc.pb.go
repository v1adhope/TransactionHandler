// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: TransactionHandler.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendClient is the client API for Send service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
}

type sendClient struct {
	cc grpc.ClientConnInterface
}

func NewSendClient(cc grpc.ClientConnInterface) SendClient {
	return &sendClient{cc}
}

func (c *sendClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/gRPC.Send/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendServer is the server API for Send service.
// All implementations must embed UnimplementedSendServer
// for forward compatibility
type SendServer interface {
	Send(context.Context, *SendRequest) (*SendResponse, error)
	mustEmbedUnimplementedSendServer()
}

// UnimplementedSendServer must be embedded to have forward compatible implementations.
type UnimplementedSendServer struct {
}

func (UnimplementedSendServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedSendServer) mustEmbedUnimplementedSendServer() {}

// UnsafeSendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendServer will
// result in compilation errors.
type UnsafeSendServer interface {
	mustEmbedUnimplementedSendServer()
}

func RegisterSendServer(s grpc.ServiceRegistrar, srv SendServer) {
	s.RegisterService(&Send_ServiceDesc, srv)
}

func _Send_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gRPC.Send/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Send_ServiceDesc is the grpc.ServiceDesc for Send service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Send_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPC.Send",
	HandlerType: (*SendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Send_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TransactionHandler.proto",
}

// GetLastClient is the client API for GetLast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetLastClient interface {
	GetLast(ctx context.Context, in *GetLastRequest, opts ...grpc.CallOption) (*GetLastResponse, error)
}

type getLastClient struct {
	cc grpc.ClientConnInterface
}

func NewGetLastClient(cc grpc.ClientConnInterface) GetLastClient {
	return &getLastClient{cc}
}

func (c *getLastClient) GetLast(ctx context.Context, in *GetLastRequest, opts ...grpc.CallOption) (*GetLastResponse, error) {
	out := new(GetLastResponse)
	err := c.cc.Invoke(ctx, "/gRPC.GetLast/GetLast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetLastServer is the server API for GetLast service.
// All implementations must embed UnimplementedGetLastServer
// for forward compatibility
type GetLastServer interface {
	GetLast(context.Context, *GetLastRequest) (*GetLastResponse, error)
	mustEmbedUnimplementedGetLastServer()
}

// UnimplementedGetLastServer must be embedded to have forward compatible implementations.
type UnimplementedGetLastServer struct {
}

func (UnimplementedGetLastServer) GetLast(context.Context, *GetLastRequest) (*GetLastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLast not implemented")
}
func (UnimplementedGetLastServer) mustEmbedUnimplementedGetLastServer() {}

// UnsafeGetLastServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetLastServer will
// result in compilation errors.
type UnsafeGetLastServer interface {
	mustEmbedUnimplementedGetLastServer()
}

func RegisterGetLastServer(s grpc.ServiceRegistrar, srv GetLastServer) {
	s.RegisterService(&GetLast_ServiceDesc, srv)
}

func _GetLast_GetLast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetLastServer).GetLast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gRPC.GetLast/GetLast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetLastServer).GetLast(ctx, req.(*GetLastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetLast_ServiceDesc is the grpc.ServiceDesc for GetLast service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetLast_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPC.GetLast",
	HandlerType: (*GetLastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLast",
			Handler:    _GetLast_GetLast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TransactionHandler.proto",
}
